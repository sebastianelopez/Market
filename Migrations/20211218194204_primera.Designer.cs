// <auto-generated />
using System;
using Final.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Final.Migrations
{
    [DbContext(typeof(FinalContext))]
    [Migration("20211218194204_primera")]
    partial class primera
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Final.Models.Cart", b =>
                {
                    b.Property<int>("cartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("cartId");

                    b.HasIndex("userId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Final.Models.CartProduct", b =>
                {
                    b.Property<int>("cartId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("ammount")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.HasKey("cartId", "productId");

                    b.HasIndex("productId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("Final.Models.CartPurchase", b =>
                {
                    b.Property<int>("purchaseId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.HasKey("purchaseId", "productId");

                    b.HasIndex("productId");

                    b.ToTable("CartPurchase");
                });

            modelBuilder.Entity("Final.Models.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("categoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Final.Models.Coupon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CartPurchaseproductId")
                        .HasColumnType("int");

                    b.Property<int?>("CartPurchasepurchaseId")
                        .HasColumnType("int");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("percentage")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CartPurchasepurchaseId", "CartPurchaseproductId");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Final.Models.Log", b =>
                {
                    b.Property<int>("logId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("eventType")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("logId");

                    b.HasIndex("userId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Final.Models.Product", b =>
                {
                    b.Property<int>("productId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ammount")
                        .HasColumnType("int");

                    b.Property<int?>("categoryId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("productId");

                    b.HasIndex("categoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Final.Models.Purchase", b =>
                {
                    b.Property<int>("purchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("buyeruserId")
                        .HasColumnType("int");

                    b.Property<double>("total")
                        .HasColumnType("float");

                    b.HasKey("purchaseId");

                    b.HasIndex("buyeruserId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Final.Models.PurchaseCoupon", b =>
                {
                    b.Property<int>("purchaseId")
                        .HasColumnType("int");

                    b.Property<int>("couponId")
                        .HasColumnType("int");

                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.HasKey("purchaseId", "couponId");

                    b.HasIndex("couponId");

                    b.ToTable("PurchaseCoupon");
                });

            modelBuilder.Entity("Final.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CUITCUIL")
                        .HasColumnType("bigint");

                    b.Property<int>("attemps")
                        .HasColumnType("int");

                    b.Property<long>("dni")
                        .HasColumnType("bigint");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("locked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Final.Models.Cart", b =>
                {
                    b.HasOne("Final.Models.User", "user")
                        .WithOne("cart")
                        .HasForeignKey("Final.Models.Cart", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Final.Models.CartProduct", b =>
                {
                    b.HasOne("Final.Models.Cart", "cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("cartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Models.Product", "product")
                        .WithMany("CartProducts")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Final.Models.CartPurchase", b =>
                {
                    b.HasOne("Final.Models.Product", "product")
                        .WithMany("CartPurchases")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Models.Purchase", "purchase")
                        .WithMany("cartPurchases")
                        .HasForeignKey("purchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("purchase");
                });

            modelBuilder.Entity("Final.Models.Coupon", b =>
                {
                    b.HasOne("Final.Models.CartPurchase", null)
                        .WithMany("couponsAplied")
                        .HasForeignKey("CartPurchasepurchaseId", "CartPurchaseproductId");
                });

            modelBuilder.Entity("Final.Models.Log", b =>
                {
                    b.HasOne("Final.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Final.Models.Product", b =>
                {
                    b.HasOne("Final.Models.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Final.Models.Purchase", b =>
                {
                    b.HasOne("Final.Models.User", "buyer")
                        .WithMany()
                        .HasForeignKey("buyeruserId");

                    b.Navigation("buyer");
                });

            modelBuilder.Entity("Final.Models.PurchaseCoupon", b =>
                {
                    b.HasOne("Final.Models.Coupon", "coupon")
                        .WithMany("purchaseCoupon")
                        .HasForeignKey("couponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Final.Models.Purchase", "purchase")
                        .WithMany("purchaseCoupon")
                        .HasForeignKey("purchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coupon");

                    b.Navigation("purchase");
                });

            modelBuilder.Entity("Final.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("Final.Models.CartPurchase", b =>
                {
                    b.Navigation("couponsAplied");
                });

            modelBuilder.Entity("Final.Models.Coupon", b =>
                {
                    b.Navigation("purchaseCoupon");
                });

            modelBuilder.Entity("Final.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("CartPurchases");
                });

            modelBuilder.Entity("Final.Models.Purchase", b =>
                {
                    b.Navigation("cartPurchases");

                    b.Navigation("purchaseCoupon");
                });

            modelBuilder.Entity("Final.Models.User", b =>
                {
                    b.Navigation("cart");
                });
#pragma warning restore 612, 618
        }
    }
}
